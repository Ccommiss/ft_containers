5000
[1;96m============================
[0m[1;96mEnd of test : insert [0m[1;96m
============================[0m
[1;96m============================
[0m[1;96mTest : erase [0m[1;96m
============================[0m
[4;30;33mPart 1[0m
[1m-> Output : [0m
[0]="0" [1]="1" [4]="12" [5]="5" [8]="24" [12]="36" [15]="15" [16]="48" [17]="17" [20]="60" [24]="72" [28]="84" [32]="96" [36]="108" [40]="120" [44]="132" [48]="144" [52]="156" [56]="168" [60]="180" [64]="192" [68]="204" [72]="216" [76]="228" [80]="240" [84]="252" [88]="264" [92]="276" [96]="288" [100]="300" [104]="312" [108]="324" [112]="336" [116]="348" [120]="360" [124]="372" [128]="384" [132]="396" [136]="408" [140]="420" [144]="432" [148]="444" [152]="456" [156]="468" [160]="480" [164]="492" [168]="504" [172]="516" [176]="528" [180]="540" [184]="552" [188]="564" [192]="576" [196]="588" 
[2mSize : [0m54
[1m-> Output : [0m
[1]="1" [5]="5" [15]="15" [17]="17" 
[2mSize : [0m4
[1m-> Output : [0m
[1]="1" [5]="5" [15]="15" 
[2mSize : [0m3
[4;30;33mPart 2[0m
[1m-> Output : [0m
[12]="iterators" 
[2mSize : [0m1
[1;96m============================
[0m[1;96mEnd of test : erase [0m[1;96m
============================[0m
[1;96m============================
[0m[1;96mTest : big_big_insert_erase [0m[1;96m
============================[0m
Size after insert : 10000
Size after : 1000
[1;96m============================
[0m[1;96mEnd of test : big_big_insert_erase [0m[1;96m
============================[0m
[1;96m============================
[0m[1;96mTest : iterators [0m[1;96m
============================[0m
[1m-> Output : [0m
[19]="Est" [27]="Un" [47]="Blagueur" [61]="Sacre" [65]="Non ?" [76]="Toto" 
[2mSize : [0m6
--End :[76]="Toto"
Begin :[19]="Est"
Begin++ :[19]="Est"
++Begin :[27]="Un"
End :[76]="Toto"
End-- :[76]="Toto"
[1;96m============================
[0m[1;96mEnd of test : iterators [0m[1;96m
============================[0m
[1;96m============================
[0m[1;96mTest : reverse_iterators [0m[1;96m
============================[0m
[1m-> output : [0m
[87]="Les reverse" [79]="Pour Tester" [71]="L'envers" [63]="A" [55]="Phrase" [50]="C'est" [47]="Une" 
z => 300

y => 200

x => 100

z => 300

y => 200

x => 100

Rbegin : [z]="300"
Avance de deux : [x]="100"
Revenu a rbegin() :[z]="300"
--Rend (= begin, because rend is past first elem) : [x]="100"
Meeting last elem :[z]="300"
Rend back reached again !
[z]="300"
z => 300
y => 200
x => 100
[1m
--- BEFORE SWAP --- 
[0m
[2mMap1 === >[0m
[1m-> Output : [0m
[45]="n" [68]="u" [79]="l" 
[2mSize : [0m3
[2mMap2 === >[0m
[1m-> Output : [0m
[12]="d" [85]="e" [101]="u" [156]="z" 
[2mSize : [0m4

*it value:
[45]="n"
[1m--- AFTER SWAP ---
[0m
[2mMap1 now contains[0m
[1m-> Output : [0m
[12]="d" [85]="e" [101]="u" [156]="z" 
[2mSize : [0m4
[2mMap2 now contains[0m
[1m-> Output : [0m
[45]="n" [68]="u" [79]="l" 
[2mSize : [0m3

*it still valid:
[45]="n"
[1;96m============================
[0m[1;96mTest : count [0m[1;96m
============================[0m
Should fail : 0
Should succeed : 1
Should fail : 0
Should succeed : 1
[1;96m============================
[0m[1;96mEnd of test : count [0m[1;96m
============================[0m
[4;30;33mPart 1[0m
low : b

up : e

a => 20
e => 100
[4;30;33mPart 2[0m
Equal of existing  :[66]="foutaise" and [74]="i love coding"
Equal		:[58]="rigolo" and [58]="rigolo"
[1;96m============================
[0m[1;96mEnd of test : bounds_equal_range [0m[1;96m
============================[0m
[1;96m============================
[0m[1;96mTest : empty [0m[1;96m
============================[0m
Is empty ? => true
Is empty ? => false
Is empty ? => true
[1;96m============================
[0m[1;96mTest : operators [0m[1;96m
============================[0m
[4;30;33mPart 1[0m
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
[4;30;33mPart 2[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
[1;96m============================
[0m[1;96mEnd of test : operators [0m[1;96m
============================[0m
[1;96m============================
[0m[1;96mTest : tricky_pairs_test [0m[1;96m
============================[0m
[1m-> Output : [0m
[[0]="10"]="Very" [[1]="2"]="One two" [[1]="11"]="Tricky" [[2]="12"]="Stuff" [[3]="13"]="Here" 
[2mSize : [0m5

[1;96m============================
[0m[1;96mEnd of test : tricky_pairs_test [0m[1;96m
============================[0m
[1;96m============================
[0m[1;96mTest : access_operators_test [0m[1;96m
============================[0m
[4;30;33m-> output :[0m
Me ?
[4;30;33m-> Impossible index : [0m
 

real	0m0.174s
user	0m0.030s
sys	0m0.002s
